{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: question.title\n    }, [_createElementVNode(\"button\", {\n      onClick: () => $setup.handleAccordion(index)\n    }, _toDisplayString(question.title), 9 /* TEXT, PROPS */, _hoisted_1), _createVNode($setup[\"Collapse\"], {\n      when: $setup.questions[index].isExpanded,\n      class: \"collapse\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"p\", null, _toDisplayString(question.answer), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"when\"])]);\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;2BAsCEA,oBASMC,6BAT2BC,gBAAS,GAA7BC,QAAQ,EAAEC,KAAK;yBAA5BJ,oBASM;MATuCK,GAAG,EAAEF,QAAQ,CAACG;QACzDC,oBAES;MAFAC,OAAK,QAAQN,sBAAe,CAACE,KAAK;wBACtCD,QAAQ,CAACG,KAAK,qCAEnBG,aAIWP;MAJAQ,IAAI,EAAER,gBAAS,CAACE,KAAK,EAAEO,UAAU;MAAEC,KAAK,EAAC;;wBAClD,MAEI,CAFJL,oBAEI,4BADCJ,QAAQ,CAACU,MAAM","names":["_createElementBlock","_Fragment","$setup","question","index","key","title","_createElementVNode","onClick","_createVNode","when","isExpanded","class","answer"],"sourceRoot":"","sources":["/home/redalex/Документы/vue/web_project/src/components/11_Faq.vue"],"sourcesContent":["<script setup>\nimport { reactive } from 'vue'\nimport { Collapse } from 'vue-collapsed'\n\nconst questions = reactive([\n  {\n    title: 'Question one',\n    answer: 'Answer one',\n    isExpanded: false // Initial value\n  },\n  {\n    title: 'Question two',\n    answer: 'Answer two',\n    isExpanded: false\n  },\n  {\n    title: 'Question three',\n    answer: 'Answer three',\n    isExpanded: false\n  }\n])\n\nfunction handleAccordion(selectedIndex) {\n  questions.forEach((_, index) => {\n    questions[index].isExpanded = index === selectedIndex ? !questions[index].isExpanded : false\n  })\n}\n\n/**\n * For individual control you might use:\n *\n * function handleMultiple(index) {\n *   questions[index].isExpanded = !questions[index].isExpanded\n * }\n */\n</script>\n\n<template>\n  <div v-for=\"(question, index) in questions\" :key=\"question.title\">\n    <button @click=\"() => handleAccordion(index)\">\n      {{ question.title }}\n    </button>\n    <Collapse :when=\"questions[index].isExpanded\" class=\"collapse\">\n      <p>\n        {{ question.answer }}\n      </p>\n    </Collapse>\n  </div>\n</template>\n\n<style>\n.collapse {\n  transition: height 600ms cubic-bezier(0.3, 0, 0.6, 1);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}